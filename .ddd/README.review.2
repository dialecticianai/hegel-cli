{"timestamp":"2025-10-14T07:02:41.455445+00:00","file":"README.md","selection":{"start":{"line":52,"col":0},"end":{"line":70,"col":0}},"text":"hegel status\n```\n\nShows:\n- Current mode (discovery/execution)\n- Current node/phase\n- Full history of nodes visited\n\n### Resetting State\n\nClear all workflow state:\n\n```bash\nhegel reset\n```\n\n## How It Works\n\nHegel uses YAML-based workflow definitions to guide you through development cycles. State is stored locally in `.hegel/state.json` (in your current working directory), making it a fully offline tool with no API keys or external dependencies required.","comment":"wefwefwef"}
{"timestamp":"2025-10-14T07:02:41.455486+00:00","file":"README.md","selection":{"start":{"line":86,"col":0},"end":{"line":103,"col":0}},"text":"This methodology treats artifacts as disposable fuel while preserving clarity and constraints as durable value.\n\n### When to Use DDD Workflows\n\n**Hegel is a general workflow orchestration tool.** The DDD-opinionated guides included in this project (SPEC_WRITING, PLAN_WRITING, etc.) are defaults, not requirements.\n\n**Use full DDD workflows for:**\n- Hard problems requiring novel solutions\n- Projects needing extremely rigorous documentation\n- Complex domains where mistakes are expensive\n- Learning-dense exploration (discovery mode)\n\n**Skip DDD overhead for:**\n- Straightforward implementations agents can handle autonomously\n- Simple CRUD applications or routine features\n- Projects where the agent doesn't need structured guidance\n\nThe workflow steps and accompanying token usage are designed for problems that **need** that rigor. Many projects don't.","comment":"wefw23333"}
